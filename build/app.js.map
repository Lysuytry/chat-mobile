{"version":3,"sources":["../src/app.js"],"names":["DBNAME","DBUSER","DBPASS","process","env","mongoose","connect","console","log","app","use","body","json","urlencoded","extended","req","res","next","success","data","options","code","status","message","fail","userRoute"],"mappings":";;;;;;AAAA;;;;AACA;;AACA;;;;AACA;;;;AACA;;AACA;;;;AACA;;;;;;AAEA,MAAM,EAACA,MAAD,EAASC,MAAT,EAAiBC,MAAjB,KAA2BC,QAAQC,GAAzC;;AAEAC,mBAASC,OAAT,CAAkB,aAAYL,MAAO,IAAGC,MAAO,4BAA2BF,MAAO,EAAjF,EAAoF,MAAM;AACxFO,UAAQC,GAAR,CAAY,gBAAZ;AACD,CAFD;;AAIA,MAAMC,MAAM,wBAAZ;;AAEAA,IAAIC,GAAJ,CAAQ,sBAAO,KAAP,CAAR;AACAD,IAAIC,GAAJ,CAAQC,qBAAKC,IAAL,EAAR;AACAH,IAAIC,GAAJ,CAAQC,qBAAKE,UAAL,CAAgB,EAAEC,UAAU,KAAZ,EAAhB,CAAR;;AAEAL,IAAIC,GAAJ,CAAQ,CAACK,GAAD,EAAMC,GAAN,EAAWC,IAAX,KAAoB;AAC1B;AACA,gCAAYF,GAAZ;AACA;AACAC,MAAIE,OAAJ,GAAc,CAACC,IAAD,EAAOC,OAAP,EAAgBC,OAAO,GAAvB,KAA+B;AAC3C,WAAO,OAAOF,IAAP,KAAgB,QAAhB,GACHC,UACEJ,IAAIM,MAAJ,CAAWD,IAAX,EAAiBT,IAAjB,CAAsB,EAAEO,IAAF,EAAQC,OAAR,EAAtB,CADF,GAEEJ,IAAIM,MAAJ,CAAWD,IAAX,EAAiBT,IAAjB,CAAsBO,IAAtB,CAHC,GAIHH,IAAIM,MAAJ,CAAWD,IAAX,EAAiBT,IAAjB,CAAsB,EAAEW,SAASJ,IAAX,EAAtB,CAJJ;AAKD,GAND;AAOA;AACAH,MAAIQ,IAAJ,GAAW,CAACD,OAAD,EAAUF,OAAO,GAAjB,KAAyB;AAClCd,YAAQC,GAAR,CAAYe,OAAZ;AACA,WAAOP,IAAIM,MAAJ,CAAWD,IAAX,EAAiBT,IAAjB,CAAsB,EAAEW,OAAF,EAAtB,CAAP;AACD,GAHD;AAIA;AACAN;AACD,CAlBD;;AAoBAR,IAAIC,GAAJ,CAAQ,eAAR,EAAyBe,cAAzB;;kBAEehB,G","file":"app.js","sourcesContent":["import express from 'express';\nimport {filterQuery} from './common/filter-query';\nimport logger from 'morgan';\nimport body from 'body-parser';\nimport 'dotenv/config';\nimport mongoose from 'mongoose';\nimport userRoute from './api/user/user.route';\n\nconst {DBNAME, DBUSER, DBPASS} = process.env;\n\nmongoose.connect(`mongodb://${DBUSER}:${DBPASS}@ds243441.mlab.com:43441/${DBNAME}`, () => {\n  console.log('connected mLab');\n});\n\nconst app = express();\n\napp.use(logger('dev'));\napp.use(body.json());\napp.use(body.urlencoded({ extended: false }));\n\napp.use((req, res, next) => {\n  //bind query\n  filterQuery(req);\n  //for response success\n  res.success = (data, options, code = 200) => {\n    return typeof data === 'object'\n      ? options\n        ? res.status(code).json({ data, options })\n        : res.status(code).json(data)\n      : res.status(code).json({ message: data });\n  };\n  //for response error\n  res.fail = (message, code = 500) => {\n    console.log(message);\n    return res.status(code).json({ message });\n  };\n  //parse to next\n  next();\n});\n\napp.use('/api/v1/users', userRoute);\n\nexport default app;\n"]}