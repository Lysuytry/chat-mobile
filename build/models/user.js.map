{"version":3,"sources":["../../src/models/user.js"],"names":["userSchema","username","type","String","required","unique","socketId","channelId","Schema","Types","ObjectId","ref","timestamps","User","mongoose","model","countUserAllChannel","result","aggregate","$group","_id","count","$sum","error","deleteUserById","id","deleteOne","countUserInChannel","leftChannel","socket","findOneAndRemove","Error","leave","to","emit","joinChannel","findOneAndUpdate","$set","join"],"mappings":";;;;;;;AAAA;;;;;;AAEA,MAAMA,aAAa,sBACjB;AACEC,YAAU,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAAgCC,QAAQ,IAAxC,EADZ;AAEEC,YAAU,EAAEJ,MAAMC,MAAR,EAFZ;AAGEI,aAAW,EAAEL,MAAMM,iBAAOC,KAAP,CAAaC,QAArB,EAA+BC,KAAK,SAApC;AAHb,CADiB,EAMjB,EAAEC,YAAY,IAAd,EANiB,CAAnB;;AASA,MAAMC,OAAOC,mBAASC,KAAT,CAAe,MAAf,EAAuBf,UAAvB,CAAb;;AAEO,MAAMgB,oDAAsB,YAAY;AAC7C,MAAI;AACF,UAAMC,SAAS,MAAMJ,KAAKK,SAAL,CAAe,CAClC;AACEC,cAAQ;AACNC,aAAK,YADC;AAENC,eAAO,EAAEC,MAAM,CAAR;AAFD;AADV,KADkC,CAAf,CAArB;AAQA,WAAOL,MAAP;AACD,GAVD,CAUE,OAAOM,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAdM;;AAgBA,MAAMC,0CAAiB,MAAMC,EAAN,IAAY;AACxC,MAAI;AACF,UAAMR,SAAS,MAAMJ,KAAKa,SAAL,CAAe,EAAEN,KAAKK,EAAP,EAAf,CAArB;AACA,WAAOR,MAAP;AACD,GAHD,CAGE,OAAOM,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAPM;;AASA,MAAMI,kDAAqB,MAAMF,EAAN,IAAY;AAC5C,MAAI;AACF,UAAMJ,QAAQ,MAAMR,KAAKQ,KAAL,CAAW,EAAEd,WAAWkB,EAAb,EAAX,CAApB;AACA,WAAOJ,KAAP;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAPM;;AASA,MAAMK,oCAAc,OAAOH,EAAP,EAAWI,MAAX,KAAsB;AAC/C,MAAI;AACF,UAAMZ,SAAS,MAAMJ,KAAKiB,gBAAL,CAAsB,EAAExB,UAAUuB,OAAOJ,EAAnB,EAAtB,CAArB;AACA,QAAI,CAACR,MAAL,EAAa,OAAO,IAAIc,KAAJ,CAAU,gBAAV,CAAP;AACbF,WAAOG,KAAP,CAAaf,OAAOV,SAApB;AACA,UAAMc,QAAQ,MAAMM,mBAAmBV,OAAOV,SAA1B,CAApB;AACAsB,WAAOI,EAAP,CAAUhB,OAAOV,SAAjB,EAA4B2B,IAA5B,CAAiC,OAAjC,EAA0Cb,KAA1C;AACA,WAAOJ,MAAP;AACD,GAPD,CAOE,OAAOM,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAXM;;AAaA,MAAMY,oCAAc,OAAOV,EAAP,EAAWI,MAAX,KAAsB;AAC/C,MAAI;AACF,UAAM,EAAEtB,SAAF,KAAgB,MAAMM,KAAKuB,gBAAL,CAAsB,EAAEhB,KAAKK,EAAP,EAAtB,EAAmC,EAAEY,MAAM,EAAE/B,UAAUuB,OAAOJ,EAAnB,EAAR,EAAnC,CAA5B;AACA,QAAI,CAAClB,SAAL,EAAgB,OAAO,IAAIwB,KAAJ,CAAU,gBAAV,CAAP;AAChBF,WAAOS,IAAP,CAAY/B,SAAZ;AACA,UAAMc,QAAQ,MAAMM,mBAAmBpB,SAAnB,CAApB;AACAsB,WAAOI,EAAP,CAAU1B,SAAV,EAAqB2B,IAArB,CAA0B,OAA1B,EAAmCb,KAAnC;AACA;AACA,WAAOd,SAAP;AACD,GARD,CAQE,OAAOgB,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAZM;;kBAcQV,I","file":"user.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\n\nconst userSchema = Schema(\n  {\n    username: { type: String, required: true, unique: true },\n    socketId: { type: String },\n    channelId: { type: Schema.Types.ObjectId, ref: 'Channel' }\n  },\n  { timestamps: true }\n);\n\nconst User = mongoose.model('User', userSchema);\n\nexport const countUserAllChannel = async () => {\n  try {\n    const result = await User.aggregate([\n      {\n        $group: {\n          _id: '$channelId',\n          count: { $sum: 1 }\n        }\n      }\n    ]);\n    return result;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const deleteUserById = async id => {\n  try {\n    const result = await User.deleteOne({ _id: id });\n    return result;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const countUserInChannel = async id => {\n  try {\n    const count = await User.count({ channelId: id });\n    return count;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const leftChannel = async (id, socket) => {\n  try {\n    const result = await User.findOneAndRemove({ socketId: socket.id });\n    if (!result) return new Error('Id is invalid.');\n    socket.leave(result.channelId);\n    const count = await countUserInChannel(result.channelId);\n    socket.to(result.channelId).emit('count', count);\n    return result;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const joinChannel = async (id, socket) => {\n  try {\n    const { channelId } = await User.findOneAndUpdate({ _id: id }, { $set: { socketId: socket.id } });\n    if (!channelId) return new Error('Id is invalid.');\n    socket.join(channelId);\n    const count = await countUserInChannel(channelId);\n    socket.to(channelId).emit('count', count);\n    //socket.broadcast.to(channelId).emit('count', count);\n    return channelId;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport default User;\n"]}