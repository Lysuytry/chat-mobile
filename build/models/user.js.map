{"version":3,"sources":["../../src/models/user.js"],"names":["userSchema","username","type","String","required","unique","channelId","Schema","Types","ObjectId","ref","timestamps","User","mongoose","model","deleteUserById","id","result","deleteOne","_id","error","countUserInChannel","count","leftChannel","socket","findByIdAndRemove","Error","leave","joinChannel","findById","join"],"mappings":";;;;;;;AAAA;;;;;;AAEA,MAAMA,aAAa,sBACjB;AACEC,YAAU,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAAgCC,QAAQ,IAAxC,EADZ;AAEEC,aAAW,EAAEJ,MAAMK,iBAAOC,KAAP,CAAaC,QAArB,EAA+BC,KAAK,SAApC;AAFb,CADiB,EAKjB,EAAEC,YAAY,IAAd,EALiB,CAAnB;;AAQA,MAAMC,OAAOC,mBAASC,KAAT,CAAe,MAAf,EAAuBd,UAAvB,CAAb;;AAEO,MAAMe,0CAAiB,MAAMC,EAAN,IAAY;AACxC,MAAI;AACF,UAAMC,SAAS,MAAML,KAAKM,SAAL,CAAe,EAAEC,KAAKH,EAAP,EAAf,CAArB;AACA,WAAOC,MAAP;AACD,GAHD,CAGE,OAAOG,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAPM;;AASA,MAAMC,kDAAqB,MAAML,EAAN,IAAY;AAC5C,MAAG;AACD,UAAMM,QAAQ,MAAMV,KAAKU,KAAL,CAAW,EAAChB,WAAWU,EAAZ,EAAX,CAApB;AACA,WAAOM,KAAP;AACD,GAHD,CAGE,OAAMF,KAAN,EAAY;AACZ,WAAOA,KAAP;AACD;AACF,CAPM;;AASA,MAAMG,oCAAc,OAAOP,EAAP,EAAWQ,MAAX,KAAsB;AAC/C,MAAI;AACF,UAAMP,SAAS,MAAML,KAAKa,iBAAL,CAAuBT,EAAvB,CAArB;AACA,QAAG,CAACC,MAAJ,EAAY,OAAO,IAAIS,KAAJ,CAAU,gBAAV,CAAP;AACZF,WAAOG,KAAP,CAAaV,OAAOX,SAApB;AACA,WAAOW,MAAP;AACD,GALD,CAKE,OAAOG,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CATM;;AAWA,MAAMQ,oCAAc,OAAOZ,EAAP,EAAWQ,MAAX,KAAsB;AAC/C,MAAI;AACF,UAAMP,SAAS,MAAML,KAAKiB,QAAL,CAAcb,EAAd,CAArB;AACA,QAAG,CAACC,MAAJ,EAAY,OAAO,IAAIS,KAAJ,CAAU,gBAAV,CAAP;AACZF,WAAOM,IAAP,CAAYb,OAAOX,SAAnB;AACA,WAAOW,MAAP;AACD,GALD,CAKE,OAAOG,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CATM;;kBAWQR,I","file":"user.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\n\nconst userSchema = Schema(\n  {\n    username: { type: String, required: true, unique: true },\n    channelId: { type: Schema.Types.ObjectId, ref: 'Channel' }\n  },\n  { timestamps: true }\n);\n\nconst User = mongoose.model('User', userSchema);\n\nexport const deleteUserById = async id => {\n  try {\n    const result = await User.deleteOne({ _id: id });\n    return result;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const countUserInChannel = async id => {\n  try{\n    const count = await User.count({channelId: id});\n    return count;\n  } catch(error){\n    return error;\n  }\n};\n\nexport const leftChannel = async (id, socket) => {\n  try {\n    const result = await User.findByIdAndRemove(id);\n    if(!result) return new Error('Id is invalid.');\n    socket.leave(result.channelId);\n    return result;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const joinChannel = async (id, socket) => {\n  try {\n    const result = await User.findById(id);\n    if(!result) return new Error('Id is invalid.');\n    socket.join(result.channelId);\n    return result;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport default User;\n"]}