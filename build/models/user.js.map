{"version":3,"sources":["../../src/models/user.js"],"names":["userSchema","username","type","String","required","unique","channelId","Schema","Types","ObjectId","ref","email","trim","lowercase","timestamps","User","mongoose","model","countUserAllChannel","result","aggregate","$group","_id","count","$sum","error","deleteUserById","id","deleteOne","countUserInChannel","leftChannel","socket","findByIdAndRemove","Error","leave","to","emit","joinChannel","findById","join"],"mappings":";;;;;;;AAAA;;;;;;AAEA,MAAMA,aAAa,sBACjB;AACEC,YAAU,EAAEC,MAAMC,MAAR,EAAgBC,UAAU,IAA1B,EAAgCC,QAAQ,IAAxC,EADZ;AAEEC,aAAW,EAAEJ,MAAMK,iBAAOC,KAAP,CAAaC,QAArB,EAA+BC,KAAK,SAApC,EAFb;AAGEC,SAAO;AACLT,UAAMC,MADD;AAELS,UAAM,IAFD;AAGLC,eAAW,IAHN;AAILR,YAAQ,IAJH;AAKLD,cAAU;AALL;AAHT,CADiB,EAYjB,EAAEU,YAAY,IAAd,EAZiB,CAAnB;;AAeA,MAAMC,OAAOC,mBAASC,KAAT,CAAe,MAAf,EAAuBjB,UAAvB,CAAb;;AAEO,MAAMkB,oDAAsB,YAAY;AAC7C,MAAI;AACF,UAAMC,SAAS,MAAMJ,KAAKK,SAAL,CAAe,CAClC;AACEC,cAAQ;AACNC,aAAK,YADC;AAENC,eAAO,EAAEC,MAAM,CAAR;AAFD;AADV,KADkC,CAAf,CAArB;AAQA,WAAOL,MAAP;AACD,GAVD,CAUE,OAAOM,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAdM;;AAgBA,MAAMC,0CAAiB,MAAMC,EAAN,IAAY;AACxC,MAAI;AACF,UAAMR,SAAS,MAAMJ,KAAKa,SAAL,CAAe,EAAEN,KAAKK,EAAP,EAAf,CAArB;AACA,WAAOR,MAAP;AACD,GAHD,CAGE,OAAOM,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAPM;;AASA,MAAMI,kDAAqB,MAAMF,EAAN,IAAY;AAC5C,MAAI;AACF,UAAMJ,QAAQ,MAAMR,KAAKQ,KAAL,CAAW,EAAEjB,WAAWqB,EAAb,EAAX,CAApB;AACA,WAAOJ,KAAP;AACD,GAHD,CAGE,OAAOE,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAPM;;AASA,MAAMK,oCAAc,OAAOH,EAAP,EAAWI,MAAX,KAAsB;AAC/C,MAAI;AACF,UAAMZ,SAAS,MAAMJ,KAAKiB,iBAAL,CAAuBL,EAAvB,CAArB;AACA,QAAI,CAACR,MAAL,EAAa,OAAO,IAAIc,KAAJ,CAAU,gBAAV,CAAP;AACbF,WAAOG,KAAP,CAAaf,OAAOb,SAApB;AACA,UAAMiB,QAAQ,MAAMM,mBAAmBV,OAAOb,SAA1B,CAApB;AACAyB,WAAOI,EAAP,CAAUhB,OAAOb,SAAjB,EAA4B8B,IAA5B,CAAiC,OAAjC,EAA0Cb,KAA1C;AACA,WAAOJ,MAAP;AACD,GAPD,CAOE,OAAOM,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAXM;;AAaA,MAAMY,oCAAc,OAAOV,EAAP,EAAWI,MAAX,KAAsB;AAC/C,MAAI;AACF,UAAM,EAAEzB,SAAF,KAAgB,MAAMS,KAAKuB,QAAL,CAAcX,EAAd,CAA5B;AACA,QAAI,CAACrB,SAAL,EAAgB,OAAO,IAAI2B,KAAJ,CAAU,gBAAV,CAAP;AAChBF,WAAOQ,IAAP,CAAYjC,SAAZ;AACA,UAAMiB,QAAQ,MAAMM,mBAAmBvB,SAAnB,CAApB;AACAyB,WAAOI,EAAP,CAAU7B,SAAV,EAAqB8B,IAArB,CAA0B,OAA1B,EAAmCb,KAAnC;AACA;AACA,WAAOjB,SAAP;AACD,GARD,CAQE,OAAOmB,KAAP,EAAc;AACd,WAAOA,KAAP;AACD;AACF,CAZM;;kBAcQV,I","file":"user.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\r\n\r\nconst userSchema = Schema(\r\n  {\r\n    username: { type: String, required: true, unique: true },\r\n    channelId: { type: Schema.Types.ObjectId, ref: 'Channel' },\r\n    email: {\r\n      type: String,\r\n      trim: true,\r\n      lowercase: true,\r\n      unique: true,\r\n      required: 'Email address is required'\r\n    }\r\n  },\r\n  { timestamps: true }\r\n);\r\n\r\nconst User = mongoose.model('User', userSchema);\r\n\r\nexport const countUserAllChannel = async () => {\r\n  try {\r\n    const result = await User.aggregate([\r\n      {\r\n        $group: {\r\n          _id: '$channelId',\r\n          count: { $sum: 1 }\r\n        }\r\n      }\r\n    ]);\r\n    return result;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const deleteUserById = async id => {\r\n  try {\r\n    const result = await User.deleteOne({ _id: id });\r\n    return result;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const countUserInChannel = async id => {\r\n  try {\r\n    const count = await User.count({ channelId: id });\r\n    return count;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const leftChannel = async (id, socket) => {\r\n  try {\r\n    const result = await User.findByIdAndRemove(id);\r\n    if (!result) return new Error('Id is invalid.');\r\n    socket.leave(result.channelId);\r\n    const count = await countUserInChannel(result.channelId);\r\n    socket.to(result.channelId).emit('count', count);\r\n    return result;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport const joinChannel = async (id, socket) => {\r\n  try {\r\n    const { channelId } = await User.findById(id);\r\n    if (!channelId) return new Error('Id is invalid.');\r\n    socket.join(channelId);\r\n    const count = await countUserInChannel(channelId);\r\n    socket.to(channelId).emit('count', count);\r\n    //socket.broadcast.to(channelId).emit('count', count);\r\n    return channelId;\r\n  } catch (error) {\r\n    return error;\r\n  }\r\n};\r\n\r\nexport default User;\r\n"]}