{"version":3,"sources":["../../src/models/user.js"],"names":["userSchema","username","type","String","required","socketId","channelId","Schema","Types","ObjectId","ref","timestamps","User","mongoose","model","countUserAllChannel","result","aggregate","$project","$match","$ne","$group","_id","count","$sum","error","deleteUserById","id","findByIdAndRemove","countUserInChannel","leftChannel","socket","findOneAndUpdate","$set","undefined","Error","leave","to","emit","joinChannel","join","io","of"],"mappings":"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","file":"user.js","sourcesContent":["import mongoose, { Schema } from 'mongoose';\nimport { io } from '../index';\n\nconst userSchema = Schema(\n  {\n    username: { type: String, required: true },\n    socketId: { type: String },\n    channelId: { type: Schema.Types.ObjectId, ref: 'Channel' }\n  },\n  { timestamps: true }\n);\n\nconst User = mongoose.model('User', userSchema);\n\nexport const countUserAllChannel = async () => {\n  try {\n    const result = await User.aggregate([\n      {\n        $project: { channelId: 1, socketId: 1 }\n      },\n      {\n        $match: { socketId: { $ne: null } }\n      },\n      {\n        $group: {\n          _id: '$channelId',\n          count: { $sum: 1 }\n        }\n      }\n    ]);\n    return result;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const deleteUserById = async id => {\n  try {\n    const result = await User.findByIdAndRemove({ _id: id });\n    return result;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const countUserInChannel = async id => {\n  try {\n    const count = await User.count({ channelId: id, socketId: { $ne: null } });\n    return count;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const leftChannel = async (id, socket) => {\n  try {\n    const result = await User.findOneAndUpdate(\n      { socketId: socket.id },\n      { $set: { socketId: undefined, channelId: undefined } }\n    );\n    if (!result) return new Error('Id is invalid.');\n    socket.leave(result.channelId);\n    const count = await countUserInChannel(result.channelId);\n    socket.to(result.channelId).emit('count', count);\n    return result;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport const joinChannel = async (id, socket) => {\n  try {\n    const { channelId } = await User.findOneAndUpdate({ _id: id }, { $set: { socketId: socket.id } });\n    if (!channelId) return new Error('Id is invalid.');\n    socket.join(channelId);\n    const count = await countUserInChannel(channelId);\n    io.of('/chatroom')\n      .to(channelId)\n      .emit('count', count);\n    //socket.broadcast.to(channelId).emit('count', count);\n    return channelId;\n  } catch (error) {\n    return error;\n  }\n};\n\nexport default User;\n"]}