{"version":3,"sources":["../../../src/api/user/user.api.js"],"names":["getUserList","req","res","limit","skip","query","user","count","Promise","all","User","aggregate","$limit","$skip","success","error","fail","stack","createUser","create","body","message","code","updateUser","id","params","updateOne","_id","$set","deleteUser","getUserById","result","findById"],"mappings":";;;;;;;AAAA;;;;;;AAEO,MAAMA,oCAAc,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC7C,MAAI;AACF,UAAM,EAAEC,KAAF,EAASC,IAAT,KAAkBH,IAAII,KAA5B;AACA,UAAM,CAACC,IAAD,EAAOC,KAAP,IAAgB,MAAMC,QAAQC,GAAR,CAAY,CAACC,eAAKC,SAAL,CAAe,CAAC,EAAEC,QAAQT,KAAV,EAAD,EAAoB,EAAEU,OAAOT,IAAT,EAApB,CAAf,CAAD,EAAuDM,eAAKH,KAAL,EAAvD,CAAZ,CAA5B;AACAL,QAAIY,OAAJ,CAAYR,IAAZ,EAAkB,EAAEC,OAAO,CAACA,KAAV,EAAiBJ,KAAjB,EAAwBC,IAAxB,EAAlB;AACD,GAJD,CAIE,OAAOW,KAAP,EAAc;AACdb,QAAIc,IAAJ,CAASD,MAAME,KAAf;AACD;AACF,CARM;;AAUA,MAAMC,kCAAa,OAAOjB,GAAP,EAAYC,GAAZ,KAAoB;AAC5C,MAAI;AACF,UAAMI,OAAO,MAAMI,eAAKS,MAAL,CAAYlB,IAAImB,IAAhB,CAAnB;AACAlB,QAAIY,OAAJ,CAAYR,IAAZ;AACD,GAHD,CAGE,OAAOS,KAAP,EAAc;AACd,UAAMM,UAAUN,MAAMO,IAAN,KAAe,KAAf,GAAuB,oBAAvB,GAA8CP,MAAMM,OAApE;AACAnB,QAAIc,IAAJ,CAASK,OAAT;AACD;AACF,CARM;;AAUA,MAAME,kCAAa,OAAOtB,GAAP,EAAYC,GAAZ,KAAoB;AAC5C,MAAI;AACF,UAAM,EAAEsB,EAAF,KAASvB,IAAIwB,MAAnB;AACA,UAAMf,eAAKgB,SAAL,CAAe,EAAEC,KAAKH,EAAP,EAAf,EAA4B,EAAEI,MAAM3B,IAAImB,IAAZ,EAA5B,CAAN;AACAlB,QAAIY,OAAJ,CAAY,uBAAZ;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACdb,QAAIc,IAAJ,CAASD,KAAT;AACD;AACF,CARM;;AAUA,MAAMc,kCAAa,OAAO5B,GAAP,EAAYC,GAAZ,KAAoB;AAC5C,MAAI;AACF,UAAM,EAAEsB,EAAF,KAASvB,IAAIwB,MAAnB;AACA,UAAM,0BAAeD,EAAf,CAAN;AACAtB,QAAIY,OAAJ,CAAY,uBAAZ;AACD,GAJD,CAIE,OAAOC,KAAP,EAAc;AACdb,QAAIc,IAAJ,CAASD,KAAT;AACD;AACF,CARM;;AAUA,MAAMe,oCAAc,OAAO7B,GAAP,EAAYC,GAAZ,KAAoB;AAC7C,MAAI;AACF,UAAM,EAAEsB,EAAF,KAASvB,IAAIwB,MAAnB;AACA,UAAMM,SAAS,MAAMrB,eAAKsB,QAAL,CAAcR,EAAd,CAArB;AACAtB,QAAIY,OAAJ,CAAYiB,MAAZ;AACD,GAJD,CAIE,OAAOhB,KAAP,EAAc;AACdb,QAAIc,IAAJ,CAASD,KAAT;AACD;AACF,CARM","file":"user.api.js","sourcesContent":["import User, { deleteUserById } from '../../models/user';\r\n\r\nexport const getUserList = async (req, res) => {\r\n  try {\r\n    const { limit, skip } = req.query;\r\n    const [user, count] = await Promise.all([User.aggregate([{ $limit: limit }, { $skip: skip }]), User.count()]);\r\n    res.success(user, { count: +count, limit, skip });\r\n  } catch (error) {\r\n    res.fail(error.stack);\r\n  }\r\n};\r\n\r\nexport const createUser = async (req, res) => {\r\n  try {\r\n    const user = await User.create(req.body);\r\n    res.success(user);\r\n  } catch (error) {\r\n    const message = error.code === 11000 ? 'Username is taken.' : error.message;\r\n    res.fail(message);\r\n  }\r\n};\r\n\r\nexport const updateUser = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    await User.updateOne({ _id: id }, { $set: req.body });\r\n    res.success('Updated Successfully.');\r\n  } catch (error) {\r\n    res.fail(error);\r\n  }\r\n};\r\n\r\nexport const deleteUser = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    await deleteUserById(id);\r\n    res.success('Successfully deleted.');\r\n  } catch (error) {\r\n    res.fail(error);\r\n  }\r\n};\r\n\r\nexport const getUserById = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const result = await User.findById(id);\r\n    res.success(result);\r\n  } catch (error) {\r\n    res.fail(error);\r\n  }\r\n};\r\n"]}