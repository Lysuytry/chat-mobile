{"version":3,"sources":["../../../src/api/channel/channel.api.js"],"names":["createChannel","req","res","console","log","name","limit","body","channel","Channel","result","save","success","error","fail","message","getChannelList","skip","status","query","filterByStatus","condition","channels","total","Promise","all","find","count","getChannelById","id","params","findOne","_id","updateChannelById","data","conditions","$set","updateOne","deleteChannelById"],"mappings":"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","file":"channel.api.js","sourcesContent":["import Channel from '../../models/channel';\r\n\r\nexport const createChannel = async (req, res) => {\r\n  console.log('hello World ..................');\r\n  try {\r\n    const { name, limit } = req.body;\r\n    const channel = new Channel({ name, limit });\r\n    const result = await channel.save();\r\n    res.success(result);\r\n  } catch (error) {\r\n    res.fail(error.message);\r\n  }\r\n};\r\n\r\nexport const getChannelList = async (req, res) => {\r\n  try {\r\n    const { limit, skip = 0, status } = req.query;\r\n\r\n    const filterByStatus = status ? { status } : { status: 'active' };\r\n    const condition = { ...filterByStatus };\r\n\r\n    const [channels, total] = await Promise.all([\r\n      Channel.find(condition)\r\n        .skip(skip)\r\n        .limit(limit),\r\n      Channel.count(condition)\r\n    ]);\r\n    res.success(channels, { limit, skip, total });\r\n  } catch (error) {\r\n    res.fail(error.message);\r\n  }\r\n};\r\n\r\nexport const getChannelById = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { status } = req.query;\r\n    const channel = await Channel.findOne({ _id: id, status });\r\n    res.success(channel);\r\n  } catch (error) {\r\n    res.fail(error.message);\r\n  }\r\n};\r\n\r\nexport const updateChannelById = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { status } = req.query;\r\n    const data = req.body;\r\n    const conditions = [{ _id: id, status }, { $set: data }];\r\n    await Channel.updateOne(...conditions);\r\n    res.success('Successfully Updated.');\r\n  } catch (error) {\r\n    res.fail(error.message);\r\n  }\r\n};\r\n\r\nexport const deleteChannelById = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const conditions = [{ _id: id, status: 'active' }, { $set: { status: 'inactive' } }];\r\n    const result = await Channel.updateOne(...conditions);\r\n    console.log(result);\r\n    res.success('Successfully deleted.');\r\n  } catch (error) {\r\n    res.fail(error.message);\r\n  }\r\n};"]}