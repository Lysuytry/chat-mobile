{"version":3,"sources":["../../../src/api/channel/channel.api.js"],"names":["createChannel","req","res","name","limit","body","channel","Channel","result","save","success","error","fail","message","getChannelList","skip","status","query","condition","channels","total","all","Promise","find","count","forEach","item","item1","id","_id","getChannelById","params","findOne","updateChannelById","data","conditions","$set","updateOne","deleteChannelById","console","log"],"mappings":";;;;;;;AAAA;;;;AACA;;;;AAEO,MAAMA,wCAAgB,OAAOC,GAAP,EAAYC,GAAZ,KAAoB;AAC/C,MAAI;AACF,UAAM,EAAEC,IAAF,EAAQC,KAAR,KAAkBH,IAAII,IAA5B;AACA,UAAMC,UAAU,IAAIC,iBAAJ,CAAY,EAAEJ,IAAF,EAAQC,KAAR,EAAZ,CAAhB;AACA,UAAMI,SAAS,MAAMF,QAAQG,IAAR,EAArB;AACAP,QAAIQ,OAAJ,CAAYF,MAAZ;AACD,GALD,CAKE,OAAOG,KAAP,EAAc;AACdT,QAAIU,IAAJ,CAASD,MAAME,OAAf;AACD;AACF,CATM;;AAWA,MAAMC,0CAAiB,OAAOb,GAAP,EAAYC,GAAZ,KAAoB;AAChD,MAAI;AACF,UAAM,EAAEE,KAAF,EAASW,IAAT,EAAeC,MAAf,KAA0Bf,IAAIgB,KAApC;;AAEA,UAAMC,YAAY,EAAEF,MAAF,EAAlB;;AAEA,UAAM,CAACG,QAAD,EAAWC,KAAX,EAAkBC,GAAlB,IAAyB,MAAMC,QAAQD,GAAR,CAAY,CAC/Cd,kBAAQgB,IAAR,CAAaL,SAAb,EACGH,IADH,CACQA,IADR,EAEGX,KAFH,CAESA,KAFT,CAD+C,EAI/CG,kBAAQiB,KAAR,CAAcN,SAAd,CAJ+C,EAK/C,gCAL+C,CAAZ,CAArC;AAOAC,aAASM,OAAT,CAAiBC,QAAQ;AACvBL,UAAII,OAAJ,CAAYE,SAAS;AACnB,YAAID,KAAKE,EAAL,IAAWD,MAAME,GAArB,EAA0B;AACxBH,eAAKF,KAAL,GAAaG,MAAMH,KAAnB;AACD;AACF,OAJD;AAKD,KAND;AAOAtB,QAAIQ,OAAJ,CAAYS,QAAZ,EAAsB,EAAEf,KAAF,EAASW,IAAT,EAAeK,KAAf,EAAtB;AACD,GApBD,CAoBE,OAAOT,KAAP,EAAc;AACdT,QAAIU,IAAJ,CAASD,MAAME,OAAf;AACD;AACF,CAxBM;;AA0BA,MAAMiB,0CAAiB,OAAO7B,GAAP,EAAYC,GAAZ,KAAoB;AAChD,MAAI;AACF,UAAM,EAAE0B,EAAF,KAAS3B,IAAI8B,MAAnB;AACA,UAAM,EAAEf,MAAF,KAAaf,IAAIgB,KAAvB;AACA,UAAMX,UAAU,MAAMC,kBAAQyB,OAAR,CAAgB,EAAEH,KAAKD,EAAP,EAAWZ,MAAX,EAAhB,CAAtB;AACAd,QAAIQ,OAAJ,CAAYJ,OAAZ;AACD,GALD,CAKE,OAAOK,KAAP,EAAc;AACdT,QAAIU,IAAJ,CAASD,MAAME,OAAf;AACD;AACF,CATM;;AAWA,MAAMoB,gDAAoB,OAAOhC,GAAP,EAAYC,GAAZ,KAAoB;AACnD,MAAI;AACF,UAAM,EAAE0B,EAAF,KAAS3B,IAAI8B,MAAnB;AACA,UAAM,EAAEf,MAAF,KAAaf,IAAIgB,KAAvB;AACA,UAAMiB,OAAOjC,IAAII,IAAjB;AACA,UAAM8B,aAAa,CAAC,EAAEN,KAAKD,EAAP,EAAWZ,MAAX,EAAD,EAAsB,EAAEoB,MAAMF,IAAR,EAAtB,CAAnB;AACA,UAAM3B,kBAAQ8B,SAAR,CAAkB,GAAGF,UAArB,CAAN;AACAjC,QAAIQ,OAAJ,CAAY,uBAAZ;AACD,GAPD,CAOE,OAAOC,KAAP,EAAc;AACdT,QAAIU,IAAJ,CAASD,MAAME,OAAf;AACD;AACF,CAXM;;AAaA,MAAMyB,gDAAoB,OAAOrC,GAAP,EAAYC,GAAZ,KAAoB;AACnD,MAAI;AACF,UAAM,EAAE0B,EAAF,KAAS3B,IAAI8B,MAAnB;AACA,UAAMI,aAAa,CAAC,EAAEN,KAAKD,EAAP,EAAWZ,QAAQ,QAAnB,EAAD,EAAgC,EAAEoB,MAAM,EAAEpB,QAAQ,UAAV,EAAR,EAAhC,CAAnB;AACA,UAAMR,SAAS,MAAMD,kBAAQ8B,SAAR,CAAkB,GAAGF,UAArB,CAArB;AACAI,YAAQC,GAAR,CAAYhC,MAAZ;AACAN,QAAIQ,OAAJ,CAAY,uBAAZ;AACD,GAND,CAME,OAAOC,KAAP,EAAc;AACdT,QAAIU,IAAJ,CAASD,MAAME,OAAf;AACD;AACF,CAVM","file":"channel.api.js","sourcesContent":["import Channel from '../../models/channel';\r\nimport { countUserAllChannel } from '../../models/user';\r\n\r\nexport const createChannel = async (req, res) => {\r\n  try {\r\n    const { name, limit } = req.body;\r\n    const channel = new Channel({ name, limit });\r\n    const result = await channel.save();\r\n    res.success(result);\r\n  } catch (error) {\r\n    res.fail(error.message);\r\n  }\r\n};\r\n\r\nexport const getChannelList = async (req, res) => {\r\n  try {\r\n    const { limit, skip, status } = req.query;\r\n\r\n    const condition = { status };\r\n\r\n    const [channels, total, all] = await Promise.all([\r\n      Channel.find(condition)\r\n        .skip(skip)\r\n        .limit(limit),\r\n      Channel.count(condition),\r\n      countUserAllChannel()\r\n    ]);\r\n    channels.forEach(item => {\r\n      all.forEach(item1 => {\r\n        if (item.id == item1._id) {\r\n          item.count = item1.count;\r\n        }\r\n      });\r\n    });\r\n    res.success(channels, { limit, skip, total });\r\n  } catch (error) {\r\n    res.fail(error.message);\r\n  }\r\n};\r\n\r\nexport const getChannelById = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { status } = req.query;\r\n    const channel = await Channel.findOne({ _id: id, status });\r\n    res.success(channel);\r\n  } catch (error) {\r\n    res.fail(error.message);\r\n  }\r\n};\r\n\r\nexport const updateChannelById = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const { status } = req.query;\r\n    const data = req.body;\r\n    const conditions = [{ _id: id, status }, { $set: data }];\r\n    await Channel.updateOne(...conditions);\r\n    res.success('Successfully Updated.');\r\n  } catch (error) {\r\n    res.fail(error.message);\r\n  }\r\n};\r\n\r\nexport const deleteChannelById = async (req, res) => {\r\n  try {\r\n    const { id } = req.params;\r\n    const conditions = [{ _id: id, status: 'active' }, { $set: { status: 'inactive' } }];\r\n    const result = await Channel.updateOne(...conditions);\r\n    console.log(result);\r\n    res.success('Successfully deleted.');\r\n  } catch (error) {\r\n    res.fail(error.message);\r\n  }\r\n};\r\n"]}