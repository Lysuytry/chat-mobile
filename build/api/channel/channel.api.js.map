{"version":3,"sources":["../../../src/api/channel/channel.api.js"],"names":["createChannel","req","res","name","body","channel","Channel","result","save","success","error","fail","message","getChannelList","limit","skip","status","query","filterByStatus","condition","channels","total","Promise","all","find","count","getChannelById","id","params","findOne","_id","updateChannelById","data","conditions","$set","updateOne","deleteChannelById","console","log"],"mappings":"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","file":"channel.api.js","sourcesContent":["import Channel from '../../models/channel';\n\nexport const createChannel = async (req, res) => {\n  try {\n    const { name } = req.body;\n    const channel = new Channel({ name });\n    const result = await channel.save();\n    res.success(result);\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const getChannelList = async (req, res) => {\n  try {\n    const { limit, skip, status } = req.query;\n\n    const filterByStatus = status ? { status } : { status: 'active' };\n    const condition = { ...filterByStatus };\n\n    const [channels, total] = await Promise.all([\n      Channel.find(condition)\n        .skip(skip)\n        .limit(limit),\n      Channel.count(condition)\n    ]);\n    res.success(channels, { limit, skip, total });\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const getChannelById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.query;\n    const channel = await Channel.findOne({ _id: id, status });\n    res.success(channel);\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const updateChannelById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const { status } = req.query;\n    const data = req.body;\n    const conditions = [{ _id: id, status }, { $set: data }];\n    await Channel.updateOne(...conditions);\n    res.success('Successfully Updated.');\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n\nexport const deleteChannelById = async (req, res) => {\n  try {\n    const { id } = req.params;\n    const conditions = [{ _id: id, status: 'active' }, { $set: { status: 'inactive' } }];\n    const result = await Channel.updateOne(...conditions);\n    console.log(result);\n    res.success('Successfully deleted.');\n  } catch (error) {\n    res.fail(error.message);\n  }\n};\n"]}